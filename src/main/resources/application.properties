spring.application.name=spring-ai-workshop


# ========== 1. configure to connect open ai model ==========
spring.ai.openai.api-key=${OPENAI_API_KEY}
spring.ai.openai.chat.options.model=gpt-4o

# ========== 2. configure to connect local llama ==========
# change dependency to ollama-starter instead of openai or anthropic
# spring.ai.openai.chat.options.model=gemma3

# ========== 3. configure to connect docker model runner ==========
#spring.ai.openai.api-key=_
#spring.ai.openai.chat.base-url=http://localhost:12434/engines/llama.cpp
#spring.ai.openai.chat.options.model=ai/gemma3

#spring.ai.chat.client.enabled=false
#
## OpenAI configuration
#spring.ai.openai.api-key=${OPENAI_API_KEY}
#spring.ai.openai.chat.options.model=gpt-4o
#
## Anthropic claude configuration
#spring.ai.anthropic.api-key=${ANTHROPIC_API_KEY}
#spring.ai.anthropic.chat.options.model=claude-opus-4-20250514

server.port=8081

logging.level.org.springframework.ai=DEBUG
logging.level.org.springframework.web.client.RestTemplate=DEBUG

logging.level.org.springframework.ai.chat.client.advisor.SimpleLoggerAdvisor=DEBUG

#
logging.level.org.springframework.web.reactive.function.client.ExchangeFunctions=DEBUG
logging.level.reactor.netty.http.client=DEBUG

# More detailed logging pattern
#logging.pattern.console=%d{yyyy-MM-dd HH:mm:ss} - %logger{36} - %msg%n

# Additional Spring AI logging
#logging.level.org.springframework.ai.openai=DEBUG
#logging.level.org.springframework.ai.client.gateway=DEBUG

# WebClient logging at package level
#logging.level.reactor.netty=DEBUG
#logging.level.org.springframework.web.reactive=DEBUG

# Enable Netty wire logging
#logging.level.reactor.netty.http.client.HttpClient=DEBUG

# Log the prompt sent to the model
spring.ai.chat.observations.log-prompt=true
# Log the completion received from the model
spring.ai.chat.observations.log-completion=true

logging.level.org.springframework.ai.chat.client.advisor=DEBUG

# Actuator Configuration - Keep it simple with just what's needed
management.endpoints.web.exposure.include=prometheus,health,info
management.prometheus.metrics.export.enabled=true

# Metrics Configuration - Essential settings for good data collection
management.metrics.distribution.percentiles-histogram.all=true
management.endpoint.metrics.access=unrestricted
management.metrics.enable.all=true

# Prometheus Configuration
management.prometheus.metrics.export.step=5s

# Micrometer Tracing for exemplars
management.tracing.sampling.probability=1.0
management.tracing.enabled=true